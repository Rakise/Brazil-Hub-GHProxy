local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")
local ConnectionManager = loadstring(game:HttpGet("https://ghproxy.net/https://raw.githubusercontent.com/Rakise/Brazil-Hub-GHProxy/main/ConnectionManager"))()

--// Configuration
local Config = {
    ESP = {
        BillboardSize = UDim2.new(0, 100, 0, 100),
        TextSize = 14,
        TextStrokeTransparency = 0.5,
        TextStrokeColor = Color3.new(0.2, 0.2, 0.2),
        Font = Enum.Font.SourceSans,
        MaxProcessPerFrame = 5,
    },
    
    Colors = {
        Default = Color3.new(0.7, 0.7, 0.7),
        Trinkets = {
            ["Amulet"] = Color3.new(0.7, 0.7, 0.7),
            ["Old Amulet"] = Color3.new(0.5, 0.5, 0.5),
            ["Goblet"] = Color3.new(0.8, 0.7, 0.3),
            ["Ruby"] = Color3.new(1, 0, 0),
            ["Sapphire"] = Color3.new(0, 0.3, 1),
            ["Emerald"] = Color3.new(0, 1, 0.3),
            ["Diamond"] = Color3.new(1, 1, 1),
            ["Howler Friend"] = Color3.new(0.956862, 0.933333, 0.901960),
            ["Opal"] = Color3.new(0.4, 0.8, 0.9),
            ["Idol of the Forgotten"] = Color3.new(0.380392, 0.376470, 0.376470),
            ["Lost Sunshine"] = Color3.new(1.0, 0.9, 0.2),
            ["Phoenix Down"] = Color3.new(0.956862, 0.564705, 0.266666),
            ["Nightstone"] = Color3.new(0.2, 0.2, 0.2),
            ["Amulet of the White King"] = Color3.new(1, 1, 1),
            ["Scroll"] = Color3.new(0.9, 0.8, 0.5),
            ["???"] = Color3.new(0.5, 0, 0.5),
            ["Azael Horn"] = Color3.new(0.8, 0.1, 0.1),
            ["Mysterious Artifact"] = Color3.new(0.2, 0.8, 0.2),
            ["Phoenix Flower"] = Color3.new(0, 0.207843, 0.392157),
            ["Rift Gem"] = Color3.new(1, 0.223529, 0.768627),
        },
    },
    
    Materials = {
        Slate = Enum.Material.Slate,
        Neon = Enum.Material.Neon,
        Glass = Enum.Material.Glass,
    },
    
    MeshTypes = {
        Sphere = Enum.MeshType.Sphere,
    },
    
    UI = {
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling,
    },
    
    Assets = {
        PhoenixTexture = "rbxassetid://1536547385",
    },
    
    MeshIDs = {
        ["5196551436"] = { name = "Amulet" },
        ["5196577540"] = { name = "Old Amulet" },
        ["5204003946"] = { name = "Goblet" },
        ["5196782997"] = { name = "Old Ring" },
        ["5196776695"] = { name = "Ring" },
        ["5204453430"] = { name = "Scroll" },
        -- Gems são identificadas por cor, não por MeshID
        -- ["2877143560"] = { name = "Ruby" },
        -- ["2877143592"] = { name = "Sapphire" },
        -- ["2877143624"] = { name = "Emerald" },
        ["2520762076"] = { name = "Howler Friend" },
        -- Khei Only
        ["4027112893"] = { name = "Bound Book"},
        -- Event Only
        ["122777605672182"] = { name = "Marshmallow on a Stick"},
    },
    
    ColorSequences = {
        PhoenixDown = {
            ColorSequenceKeypoint.new(0, Color3.new(1, 4/5, 0)),
            ColorSequenceKeypoint.new(1, Color3.new(1, 128/255, 0)),
        },
        AzaelHorn = {
            ColorSequenceKeypoint.new(0, Color3.new(1, 2/51, 2/51)),
            ColorSequenceKeypoint.new(1, Color3.new(1, 2/51, 2/51)),
        },
        MysteriousArtifact = {
            ColorSequenceKeypoint.new(0, Color3.new(38/85, 1, 0)),
            ColorSequenceKeypoint.new(1, Color3.new(41/85, 1, 0)),
        },
        PhoenixFlower = {
            ColorSequenceKeypoint.new(0, Color3.new(0, 0.207843, 0.392157)),
            ColorSequenceKeypoint.new(1, Color3.new(1, 0.207843, 0.392157)),
        },
    },
}

-- Cache de funções frequentemente usadas
local tostring = tostring
local pairs = pairs
local setmetatable = setmetatable
local Vector2_new = Vector2.new
local UDim2_new = UDim2.new
local Color3_new = Color3.new
local Instance_new = Instance.new

-- Função otimizada para limpar mesh IDs
local function cleanMeshId(id)
    local str = tostring(id)
    str = str:gsub("%%20", "")
    str = str:gsub("%s+", "")
    -- Remove rbxassetid:// se presente
    str = str:gsub("rbxassetid://", "")
    -- Debug: print para verificar se os IDs estão sendo limpos corretamente
    print("Original MeshID:", id)
    print("Cleaned MeshID:", str)
    return str
end

-- Função otimizada para verificar trinkets usando cache de verificações
local trinketCache = {}
local function isTrinket(obj)
    local objType = obj.ClassName
    -- Cache hit check primeiro
    if trinketCache[obj] ~= nil then
        return trinketCache[obj]
    end
    
    -- Verificação otimizada: só verifica se é Part/MeshPart primeiro
    if objType ~= "Part" and objType ~= "MeshPart" then
        trinketCache[obj] = false
        return false
    end
    
    local hasID = obj:FindFirstChild("ID") ~= nil
    trinketCache[obj] = hasID
    return hasID
end

local function identifyAttachmentTrinket(attachment)
    for _, subChild in ipairs(attachment:GetChildren()) do
        if subChild.ClassName == "ParticleEmitter" and tostring(subChild.Texture) == Config.Assets.PhoenixTexture then
            local cs = subChild.Color
            if cs and cs.Keypoints and #cs.Keypoints == 2 then
                local k1, k2 = cs.Keypoints[1], cs.Keypoints[2]
                if k1.Time == 0 and k2.Time == 1 then
                    if k1.Value == Config.ColorSequences.PhoenixDown[1].Value and k2.Value == Config.ColorSequences.PhoenixDown[2].Value then
                        return "Phoenix Down"
                    elseif k1.Value == Config.ColorSequences.AzaelHorn[1].Value and k2.Value == Config.ColorSequences.AzaelHorn[2].Value then
                        return "Azael Horn"
                    elseif k1.Value == Config.ColorSequences.MysteriousArtifact[1].Value and k2.Value == Config.ColorSequences.MysteriousArtifact[2].Value then
                        return "Mysterious Artifact"
                    elseif k1.Value == Config.ColorSequences.PhoenixFlower[1].Value and k2.Value == Config.ColorSequences.PhoenixFlower[2].Value then
                        return "Phoenix Flower"
                    end
                end
            end
        end
    end
end

local function getTrinketInfo(part)
    local material = part.Material

    if material == Config.Materials.Slate then
        return "Idol of the Forgotten"
    end

    if material == Config.Materials.Glass and part:FindFirstChildOfClass("SpecialMesh") then
        return "Opal"
    end

    if material == Config.Materials.Neon then
        if part.BrickColor == BrickColor.new("Gold") then
            return "Lost Sunshine"
        end
        return part:FindFirstChildOfClass("PointLight") and "Amulet of the White King" or "Nightstone"
    end

    if part.Transparency == 1 then
        local hasOrb, hasLight, hasSphere = false, false, false
        for _, child in ipairs(part:GetChildren()) do
            if child.ClassName == "ParticleEmitter" and child.Name == "OrbParticle" then
                hasOrb = true
            elseif child.ClassName == "PointLight" then
                hasLight = true
            elseif child.ClassName == "SpecialMesh" and child.MeshType == Config.MeshTypes.Sphere then
                hasSphere = true
            elseif child.ClassName == "Attachment" then
                local result = identifyAttachmentTrinket(child)
                if result then return result end
            end
            if hasOrb and hasLight and hasSphere then break end
        end
        if hasOrb and hasLight and hasSphere then
            return "???"
        end
    end

    local meshId
    if part:IsA("MeshPart") then
        meshId = part.MeshId
    else
        local mesh = part:FindFirstChildWhichIsA("SpecialMesh") or part:FindFirstChildWhichIsA("Mesh")
        meshId = mesh and mesh.MeshId
    end

    if meshId and meshId ~= "" then
        local cleanId = cleanMeshId(meshId)
        local trinketData = Config.MeshIDs[cleanId]
        
        -- Identificação especial para gemas que compartilham o mesmo MeshID
        if cleanId == "2877143560" or cleanId == "2877143592" or cleanId == "2877143624" then
            local brickColor = part.BrickColor
            local colorName = brickColor.Name
            local colorValue = brickColor.Color
            
            -- Debug para verificar as cores
            print("=== GEM DETECTION DEBUG ===")
            print("MeshID:", meshId)
            print("CleanID:", cleanId)
            print("BrickColor Name:", colorName)
            print("BrickColor RGB:", colorValue.R, colorValue.G, colorValue.B)
            print("Is Red (Ruby):", colorName == "Really red" or colorName == "Bright red" or (colorValue.R > 0.8 and colorValue.G < 0.3 and colorValue.B < 0.3))
            print("Is Blue (Sapphire):", colorName == "Bright blue" or colorName == "Cyan" or "Lapis" or (colorValue.R < 0.3 and colorValue.G < 0.3 and colorValue.B > 0.8))
            print("Is Green (Emerald):", colorName == "Bright green" or colorName == "Lime green" or (colorValue.R < 0.3 and colorValue.G > 0.8 and colorValue.B < 0.3))
            print("Is White (Diamond):", colorName == "White" or colorName == "Institutional white" or (colorValue.R > 0.9 and colorValue.G > 0.9 and colorValue.B > 0.9))
            print("========================")
            
            -- Identificação por cor (nome e valor RGB)
            -- Verificar primeiro por nome exato, depois por RGB
            if colorName == "Really red" or colorName == "Bright red" then
                print("-> Detected as Ruby (by name)")
                return "Ruby"
            elseif colorName == "Bright blue" or colorName == "Cyan" or colorName == "Lapis" then
                print("-> Detected as Sapphire (by name)")
                return "Sapphire"
            elseif colorName == "Bright green" or colorName == "Lime green" then
                print("-> Detected as Emerald (by name)")
                return "Emerald"
            elseif colorName == "White" or colorName == "Institutional white" then
                print("-> Detected as Diamond (by name)")
                return "Diamond"
            -- Se não encontrou por nome, verificar por RGB
            elseif colorValue.R > 0.7 and colorValue.G < 0.2 and colorValue.B < 0.2 then
                print("-> Detected as Ruby (by RGB)")
                return "Ruby"
            elseif colorValue.R < 0.2 and colorValue.G < 0.2 and colorValue.B > 0.7 then
                print("-> Detected as Sapphire (by RGB)")
                return "Sapphire"
            elseif colorValue.R < 0.2 and colorValue.G > 0.7 and colorValue.B < 0.2 then
                print("-> Detected as Emerald (by RGB)")
                return "Emerald"
            elseif colorValue.R > 0.8 and colorValue.G > 0.8 and colorValue.B > 0.8 then
                print("-> Detected as Diamond (by RGB)")
                return "Diamond"
            else
                print("-> Fallback to Rift Gem")
                return "Rift Gem"
            end
        end
        
        -- Para outros trinkets, usa a lógica normal
        return trinketData and trinketData.name or meshId
    end

    return "Unknown"
end

local TrinketESP = {}
TrinketESP.__index = TrinketESP

function TrinketESP.new()
    return setmetatable({
        espBillboards = {},
        _connectionManager = ConnectionManager.new(),
        enabled = false,
        -- Sistema de fila para processamento assíncrono
        _pendingTrinkets = {},
        _processingQueue = false,
        -- Cache para evitar re-verificações
        _processedObjects = {},
    }, TrinketESP)
end

-- Função otimizada para criar billboard com cor definida pelo próprio trinket
function TrinketESP:createBillboard(trinket, trinketName)
    if self.espBillboards[trinket] then return end

    local billboard = Instance_new("BillboardGui")
    billboard.Name = "TrinketESP"
    billboard.Adornee = trinket
    billboard.LightInfluence = 1
    billboard.ZIndexBehavior = Config.UI.ZIndexBehavior
    billboard.AlwaysOnTop = true
    billboard.Size = Config.ESP.BillboardSize
    billboard.Parent = trinket

    local label = Instance_new("TextLabel")
    label.Text = trinketName
    
    -- Definir cor baseada no nome do trinket (declarativo)
    local color = Config.Colors.Trinkets[trinketName] or Config.Colors.Default
    label.TextColor3 = color
    
    -- Ajustar stroke baseado no tipo para melhor visibilidade
    label.TextStrokeTransparency = Config.ESP.TextStrokeTransparency
    label.TextStrokeColor3 = Config.ESP.TextStrokeColor
    
    label.Font = Config.ESP.Font
    label.TextSize = Config.ESP.TextSize
    label.BackgroundTransparency = 1
    label.BorderSizePixel = 0
    label.Size = UDim2_new(1, 0, 1, 0)
    label.Position = UDim2_new(0.5, 0, 0.5, 0)
    label.AnchorPoint = Vector2_new(0.5, 0.5)
    label.Parent = billboard

    self.espBillboards[trinket] = billboard
end

function TrinketESP:removeBillboard(trinket)
    local billboard = self.espBillboards[trinket]
    if billboard then
        billboard:Destroy()
        self.espBillboards[trinket] = nil
    end
    trinketCache[trinket] = nil
    self._processedObjects[trinket] = nil
end

-- SOLUÇÃO 1: Sistema de fila assíncrona
function TrinketESP:processQueue()
    if self._processingQueue or #self._pendingTrinkets == 0 then return end
    
    self._processingQueue = true
    
    -- Processa até 5 trinkets por frame para evitar lag
    local maxPerFrame = Config.ESP.MaxProcessPerFrame
    local processed = 0
    
    while #self._pendingTrinkets > 0 and processed < maxPerFrame do
        local trinket = table.remove(self._pendingTrinkets, 1)
        
        -- Verificar se o trinket ainda é válido
        if trinket and trinket.Parent and not self._processedObjects[trinket] then
            self._processedObjects[trinket] = true
            local trinketName = getTrinketInfo(trinket)
            self:createBillboard(trinket, trinketName)
        end
        
        processed = processed + 1
    end
    
    self._processingQueue = false
    
    -- Se ainda há trinkets na fila, agenda próximo processamento
    if #self._pendingTrinkets > 0 then
        RunService.Heartbeat:Wait()
        self:processQueue()
    end
end

-- SOLUÇÃO 2: Detecção imediata com processamento assíncrono
function TrinketESP:onChildAdded(obj)
    if not self.enabled then return end
    
    -- Verificação imediata sem throttling
    if not isTrinket(obj) or self._processedObjects[obj] then 
        return 
    end
    
    -- Adiciona à fila para processamento assíncrono
    table.insert(self._pendingTrinkets, obj)
    
    -- Inicia processamento se não está rodando
    if not self._processingQueue then
        self:processQueue()
    end
end

function TrinketESP:onChildRemoved(obj)
    if not self.enabled or not self.espBillboards[obj] then return end
    
    self:removeBillboard(obj)
    
    -- Remove da fila pendente se ainda estiver lá
    for i = #self._pendingTrinkets, 1, -1 do
        if self._pendingTrinkets[i] == obj then
            table.remove(self._pendingTrinkets, i)
            break
        end
    end
end

-- SOLUÇÃO 3: Scan inicial otimizado em lotes
function TrinketESP:scanExistingTrinkets()
    local workspaceChildren = Workspace:GetChildren()
    local trinkets = {}
    
    -- Primeiro pass: identifica todos os trinkets
    for i = 1, #workspaceChildren do
        local obj = workspaceChildren[i]
        if isTrinket(obj) and not self._processedObjects[obj] then
            table.insert(trinkets, obj)
        end
    end
    
    -- Segundo pass: processa em lotes assíncronos
    for i = 1, #trinkets do
        table.insert(self._pendingTrinkets, trinkets[i])
    end
    
    if #self._pendingTrinkets > 0 then
        self:processQueue()
    end
end

function TrinketESP:enable()
    if self.enabled then return end
    
    self.enabled = true
    
    -- Scan inicial otimizado
    self:scanExistingTrinkets()
    
    -- Conexões sem throttling - detecção imediata
    self._connectionManager:add(Workspace.ChildAdded:Connect(function(obj)
        self:onChildAdded(obj)
    end))
    
    self._connectionManager:add(Workspace.ChildRemoved:Connect(function(obj)
        self:onChildRemoved(obj)
    end))
end

function TrinketESP:disable()
    self.enabled = false
    self._connectionManager:disconnectAll()
    
    -- Limpeza otimizada
    for trinket in pairs(self.espBillboards) do
        self:removeBillboard(trinket)
    end
    
    -- Limpar caches e fila
    trinketCache = {}
    self._processedObjects = {}
    self._pendingTrinkets = {}
    self._processingQueue = false
end

function TrinketESP:destroy()
    self:disable()
    self._connectionManager = nil
    self.espBillboards = nil
    self._processedObjects = nil
    self._pendingTrinkets = nil
end

return TrinketESP
