-- AutoBlock: Advanced multi-condition threat detection system - OPTIMIZED FOR PERFORMANCE
-- Supports single and combo threats (animation + item + state combinations)

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

-- External dependency for connection management
local ConnectionManager = loadstring(game:HttpGet("https://ghproxy.net/https://raw.githubusercontent.com/Rakise/Brazil-Hub-GHProxy/main/ConnectionManager"))()

-- Constants and cached values
local DEFAULT_BLOCK_RADIUS = 200
local LOCAL_PLAYER = Players.LocalPlayer
local DETECTION_INTERVAL = 0.01 -- 100 FPS para máxima velocidade de reação
local CACHE_DURATION = 0.1 -- Cache player states for 100ms

-- Pre-computed values
local math_deg = math.deg
local math_acos = math.acos
local table_insert = table.insert
local tick = tick

-- Threat condition types
local ConditionType = {
    ANIMATION = "animation",
    EQUIPPED_ITEM = "equippedItem",
    PLAYER_STATE = "playerState",
    PROXIMITY = "proximity",
    HEALTH = "health",
    WALKSPEED = "walkspeed",
    ACCESSORY = "accessory",
    FACING = "facing"
}

-- Threat matching operators
local MatchOperator = {
    AND = "and",
    OR = "or"
}

-- Default single-condition threats
local DEFAULT_SINGLE_THREATS = {
    ["grapple"] = {
        name = "Grapple",
        category = "skills",
        priority = 1,
        conditions = {
            {
                type = ConditionType.ANIMATION,
                scope = "proximity",
                value = "rbxassetid://3110530226"
            }
        },
        operator = MatchOperator.AND,
        blockDistance = 200
    },
    ["verdien"] = {
        name = "Verdien",
        category = "skills",
        priority = 1,
        conditions = {
            {
                type = ConditionType.ACCESSORY,
                value = "Charge"
            },
            {
                type = ConditionType.EQUIPPED_ITEM,
                value = "Verdien"
            }
        },
        operator = MatchOperator.AND,
        blockDistance = 200
    },
    ["spear_strikes"] = {
        name = "Spear Strikes",
        category = "skills",
        priority = 1,
        conditions = {
            {
                type = ConditionType.ANIMATION,
                value = "rbxassetid://2981817530"
            }
        },
        operator = MatchOperator.AND,
        blockDistance = 10
    },
    ["spear_m2"] = {
        name = "Spear M2",
        category = "attack_type",
        priority = 2,
        conditions = {
            {
                type = ConditionType.ANIMATION,
                value = "rbxassetid://2890507639"
            }
        },
        operator = MatchOperator.AND,
        blockDistance = 10
    },
    ["heavy_attack"] = {
        name = "Heavy Attack",
        category = "attack_type",
        priority = 2,
        conditions = {
            {
                type = ConditionType.ACCESSORY,
                value = "HeavyAttack"
            }
        },
        operator = MatchOperator.AND,
        blockDistance = 10
    },
    ["light_attack"] = {
        name = "Light Attack",
        category = "attack_type",
        priority = 3,
        conditions = {
            {
                type = ConditionType.ACCESSORY,
                value = "LightAttack"
            },
            {
                type = ConditionType.FACING,
                angle = 180
            }
        },
        operator = MatchOperator.AND,
        blockDistance = 15
    },
}

local AutoBlock = {}
AutoBlock.__index = AutoBlock

-- Constructor
function AutoBlock.new(blockRadius)
    local self = setmetatable({}, AutoBlock)
    
    -- Core properties
    self.enabled = false
    self.blockRadius = blockRadius or DEFAULT_BLOCK_RADIUS
    self._connectionManager = ConnectionManager.new()
    self._isCurrentlyBlocking = false
    
    -- Threat configurations
    self._threatConfigs = {}
    
    -- Detection settings
    self._detectionSettings = {
        enableSingleThreats = true,
        enableComboThreats = true,
        priorityThreshold = 0,
        debugMode = false  -- Disabled by default for performance
    }
    
    -- Current threat tracking
    self._currentThreats = {}
    self._blockStartTime = 0
    self._lastDetectionTime = 0
    
    -- Performance caches
    self._playerCache = {} -- Cache player data
    self._lastCacheUpdate = 0
    self._validPlayers = {} -- Pre-filtered valid players
    self._lastPlayerUpdate = 0
    
    -- Throttling
    self._lastDetectionRun = 0
    
    -- Initialize with default configurations
    self:_initializeDefaultThreats()
    
    return self
end

-- Private Methods

-- Initialize with default threat configurations
function AutoBlock:_initializeDefaultThreats()
    for threatId, config in pairs(DEFAULT_SINGLE_THREATS) do
        self._threatConfigs[threatId] = config
    end
end

-- Cached player validation (updated every 100ms)
function AutoBlock:_updateValidPlayers()
    local currentTime = tick()
    if currentTime - self._lastPlayerUpdate < CACHE_DURATION then
        return
    end
    
    self._lastPlayerUpdate = currentTime
    local validPlayers = {}
    local count = 0
    
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LOCAL_PLAYER and 
           player.Character and 
           player.Character:FindFirstChild("HumanoidRootPart") and
           player.Character:FindFirstChild("Humanoid") then
            count = count + 1
            validPlayers[count] = player
        end
    end
    
    self._validPlayers = validPlayers
end

-- Get the local player's character and validate it (cached)
function AutoBlock:_getValidatedLocalCharacter()
    if not LOCAL_PLAYER or not LOCAL_PLAYER.Character then
        return nil
    end
    
    local character = LOCAL_PLAYER.Character
    if not character:FindFirstChild("HumanoidRootPart") then
        return nil
    end
    
    return character
end

-- Cached remote access
function AutoBlock:_getCharacterRemotes(character)
    local remotes = character:FindFirstChild("CharacterHandler")
    if remotes then
        remotes = remotes:FindFirstChild("Remotes")
    end
    return remotes
end

-- Execute remote event if it exists and is valid
function AutoBlock:_executeRemoteEvent(remotes, remoteName)
    if not remotes then return false end
    
    local remote = remotes:FindFirstChild(remoteName)
    if remote and remote:IsA("RemoteEvent") then
        remote:FireServer()
        return true
    end
    return false
end

-- Cached equipped item check
function AutoBlock:_getEquippedItem(player)
    local currentTime = tick()
    local cacheKey = player.Name .. "_equipped"
    local cache = self._playerCache[cacheKey]
    
    if cache and currentTime - cache.time < CACHE_DURATION then
        return cache.value
    end
    
    local equippedItem = nil
    if player.Character then
        local equippedTool = player.Character:FindFirstChildOfClass("Tool")
        if equippedTool then
            equippedItem = equippedTool.Name
        end
    end
    
    self._playerCache[cacheKey] = {
        value = equippedItem,
        time = currentTime
    }
    
    return equippedItem
end

-- Optimized accessory check with minimal monitoring
function AutoBlock:_hasAccessory(player, accessoryName)
    if not player.Character then return false end
    
    local cacheKey = player.Name .. "_accessory_" .. accessoryName
    local currentTime = tick()
    local cache = self._playerCache[cacheKey]
    
    if cache and currentTime - cache.time < CACHE_DURATION then
        return cache.value
    end
    
    local hasAccessory = player.Character:FindFirstChild(accessoryName) ~= nil
    
    self._playerCache[cacheKey] = {
        value = hasAccessory,
        time = currentTime
    }
    
    return hasAccessory
end

-- Cached player states
function AutoBlock:_getPlayerStates(player)
    local currentTime = tick()
    local cacheKey = player.Name .. "_states"
    local cache = self._playerCache[cacheKey]
    
    if cache and currentTime - cache.time < CACHE_DURATION then
        return cache.value
    end
    
    local states = {}
    
    if player.Character and player.Character:FindFirstChild("Humanoid") then
        local humanoid = player.Character.Humanoid
        
        -- Movement states
        if humanoid.MoveDirection.Magnitude > 0 then
            if humanoid.WalkSpeed > 20 then
                states.Sprinting = true
            else
                states.Walking = true
            end
        else
            states.Idle = true
        end
        
        -- Action states
        if humanoid.Jump then
            states.Jumping = true
        end
        
        if humanoid.PlatformStand then
            states.Stunned = true
        end
        
        -- Health state
        if humanoid.Health < humanoid.MaxHealth * 0.3 then
            states.LowHealth = true
        end
    end
    
    self._playerCache[cacheKey] = {
        value = states,
        time = currentTime
    }
    
    return states
end

-- Cached active animations
function AutoBlock:_getActiveAnimations(player)
    local currentTime = tick()
    local cacheKey = player.Name .. "_animations"
    local cache = self._playerCache[cacheKey]
    
    if cache and currentTime - cache.time < CACHE_DURATION then
        return cache.value
    end
    
    local animations = {}
    
    if player.Character and player.Character:FindFirstChild("Humanoid") then
        local animationTracks = player.Character.Humanoid:GetPlayingAnimationTracks()
        
        for _, track in ipairs(animationTracks) do
            if track.Animation and track.Animation.AnimationId then
                animations[track.Animation.AnimationId] = true
            end
        end
    end
    
    self._playerCache[cacheKey] = {
        value = animations,
        time = currentTime
    }
    
    return animations
end

-- Optimized condition checking with early returns
function AutoBlock:_checkCondition(condition, player, myPosition)
    local conditionType = condition.type
    
    if conditionType == ConditionType.ANIMATION then
        local activeAnimations = self:_getActiveAnimations(player)
        return activeAnimations[condition.value] == true
        
    elseif conditionType == ConditionType.EQUIPPED_ITEM then
        local equippedItem = self:_getEquippedItem(player)
        local conditionValue = condition.value
        
        if type(conditionValue) == "table" then
            for _, item in ipairs(conditionValue) do
                if equippedItem == item then
                    return true
                end
            end
            return false
        else
            return equippedItem == conditionValue
        end
        
    elseif conditionType == ConditionType.ACCESSORY then
        return self:_hasAccessory(player, condition.value)
        
    elseif conditionType == ConditionType.PLAYER_STATE then
        local playerStates = self:_getPlayerStates(player)
        return playerStates[condition.value] == true
        
    elseif conditionType == ConditionType.PROXIMITY then
        if not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then
            return false
        end
        local distance = (myPosition - player.Character.HumanoidRootPart.Position).Magnitude
        return distance <= condition.value
        
    elseif conditionType == ConditionType.HEALTH then
        if not player.Character or not player.Character:FindFirstChild("Humanoid") then
            return false
        end
        local humanoid = player.Character.Humanoid
        local healthPercent = humanoid.Health / humanoid.MaxHealth
        local comparison = condition.comparison
        local value = condition.value
        
        if comparison == "<=" then
            return healthPercent <= value
        elseif comparison == ">=" then
            return healthPercent >= value
        elseif comparison == "<" then
            return healthPercent < value
        elseif comparison == ">" then
            return healthPercent > value
        else
            return healthPercent == value
        end
        
    elseif conditionType == ConditionType.WALKSPEED then
        if not player.Character or not player.Character:FindFirstChild("Humanoid") then
            return false
        end
        local walkSpeed = player.Character.Humanoid.WalkSpeed
        local comparison = condition.comparison
        local value = condition.value
        
        if comparison == "<=" then
            return walkSpeed <= value
        elseif comparison == ">=" then
            return walkSpeed >= value
        elseif comparison == "<" then
            return walkSpeed < value
        elseif comparison == ">" then
            return walkSpeed > value
        else
            return walkSpeed == value
        end
        
    elseif conditionType == ConditionType.FACING then
        local angle = condition.angle or 45
        return self:_isFacing(LOCAL_PLAYER, player, angle)
    end
    
    return false
end

-- Optimized threat evaluation with early exits
function AutoBlock:_evaluateThreat(threatConfig, player, myPosition)
    local conditions = threatConfig.conditions
    if not conditions or #conditions == 0 then
        return false
    end
    
    -- Early distance check
    if not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then
        return false
    end
    
    local distance = (myPosition - player.Character.HumanoidRootPart.Position).Magnitude
    local maxDistance = threatConfig.blockDistance or self.blockRadius
    
    if distance > maxDistance then
        return false
    end
    
    -- Evaluate conditions with early exit optimization
    local operator = threatConfig.operator
    
    if operator == MatchOperator.AND then
        -- All conditions must be true - exit early on first false
        for _, condition in ipairs(conditions) do
            if not self:_checkCondition(condition, player, myPosition) then
                return false
            end
        end
        return true
    else
        -- Any condition can be true - exit early on first true
        for _, condition in ipairs(conditions) do
            if self:_checkCondition(condition, player, myPosition) then
                return true
            end
        end
        return false
    end
end

-- Optimized player scanning with reduced allocations
function AutoBlock:_scanPlayerForThreats(player, myPosition)
    local detectedThreats = {}
    local threatCount = 0
    
    for threatId, threatConfig in pairs(self._threatConfigs) do
        -- Check if this threat type is enabled
        local isCombo = #threatConfig.conditions > 1
        if (isCombo and not self._detectionSettings.enableComboThreats) or 
           (not isCombo and not self._detectionSettings.enableSingleThreats) then
            continue
        end
        
        -- Check priority threshold
        if threatConfig.priority < self._detectionSettings.priorityThreshold then
            continue
        end
        
        -- Evaluate threat conditions
        if self:_evaluateThreat(threatConfig, player, myPosition) then
            threatCount = threatCount + 1
            detectedThreats[threatCount] = {
                id = threatId,
                config = threatConfig,
                player = player.Name,
                distance = (myPosition - player.Character.HumanoidRootPart.Position).Magnitude,
                detectedAt = tick()
            }
        end
    end
    
    return detectedThreats
end

-- Optimized priority threat selection
function AutoBlock:_getHighestPriorityThreat(allThreats)
    if #allThreats == 0 then return nil end
    
    local highestPriority = 0
    local priorityThreat = nil
    
    for i = 1, #allThreats do
        local threat = allThreats[i]
        if threat.config.priority > highestPriority then
            highestPriority = threat.config.priority
            priorityThreat = threat
        end
    end
    
    return priorityThreat
end

-- Update blocking state based on threat detection
function AutoBlock:_updateBlockingState(threats)
    local shouldBlock = #threats > 0
    
    if shouldBlock and not self._isCurrentlyBlocking then
        local primaryThreat = self:_getHighestPriorityThreat(threats)
        self:_activateBlock(primaryThreat, threats)
    elseif not shouldBlock and self._isCurrentlyBlocking then
        self:_deactivateBlock()
    end
    
    self._currentThreats = threats
end

-- Activate blocking and update state
function AutoBlock:_activateBlock(primaryThreat, allThreats)
    if self:triggerBlock() then
        self._isCurrentlyBlocking = true
        self._blockStartTime = tick()
        
        -- Minimal logging for performance
        if self._detectionSettings.debugMode then
            print(string.format("[AutoBlock] Block: %s from %s", 
                primaryThreat.config.name, primaryThreat.player))
        end
    end
end

-- Deactivate blocking and update state
function AutoBlock:_deactivateBlock()
    if self:triggerUnblock() then
        self._isCurrentlyBlocking = false
        self._currentThreats = {}
        
        if self._detectionSettings.debugMode then
            local blockDuration = tick() - self._blockStartTime
            print(string.format("[AutoBlock] Unblock (%.2fs)", blockDuration))
        end
    end
end

-- Public Methods

-- Trigger block action
function AutoBlock:triggerBlock()
    local character = self:_getValidatedLocalCharacter()
    if not character then return false end
    
    local remotes = self:_getCharacterRemotes(character)
    return self:_executeRemoteEvent(remotes, "Block")
end

-- Trigger unblock action
function AutoBlock:triggerUnblock()
    local character = self:_getValidatedLocalCharacter()
    if not character then return false end
    
    local remotes = self:_getCharacterRemotes(character)
    return self:_executeRemoteEvent(remotes, "Unblock")
end

-- Add a new threat configuration
function AutoBlock:addThreat(threatId, config)
    if not threatId or not config then
        return false
    end
    
    if not config.name or not config.conditions or #config.conditions == 0 then
        return false
    end
    
    config.priority = config.priority or 1
    config.operator = config.operator or MatchOperator.AND
    config.blockDistance = config.blockDistance or self.blockRadius
    config.blockDuration = config.blockDuration or 2.0
    
    for i, condition in ipairs(config.conditions) do
        if not condition.type or not condition.value then
            return false
        end
    end
    
    self._threatConfigs[threatId] = config
    return true
end

-- Remove a threat configuration
function AutoBlock:removeThreat(threatId)
    if self._threatConfigs[threatId] then
        self._threatConfigs[threatId] = nil
        return true
    end
    return false
end

-- Get all configured threats
function AutoBlock:getAllThreats()
    local threats = {}
    for threatId, config in pairs(self._threatConfigs) do
        threats[threatId] = config
    end
    return threats
end

-- Get threats by type
function AutoBlock:getThreatsByType(isCombo)
    local threats = {}
    for threatId, config in pairs(self._threatConfigs) do
        local configIsCombo = #config.conditions > 1
        if configIsCombo == isCombo then
            threats[threatId] = config
        end
    end
    return threats
end

-- Configure detection settings
function AutoBlock:configureDetection(settings)
    for setting, value in pairs(settings) do
        if self._detectionSettings[setting] ~= nil then
            self._detectionSettings[setting] = value
        end
    end
end

-- Set the blocking radius
function AutoBlock:setBlockRadius(radius)
    if radius and radius > 0 then
        self.blockRadius = radius
    end
end

-- Get current blocking radius
function AutoBlock:getBlockRadius()
    return self.blockRadius
end

-- Get currently detected threats
function AutoBlock:getCurrentThreats()
    return self._currentThreats
end

-- OPTIMIZED: Main threat detection with throttling
function AutoBlock:detectThreats()
    local currentTime = tick()
    if currentTime - self._lastDetectionRun < DETECTION_INTERVAL then
        return
    end
    self._lastDetectionRun = currentTime

    local localCharacter = self:_getValidatedLocalCharacter()
    if not localCharacter then return end

    self:_updateValidPlayers()
    local myPosition = localCharacter.HumanoidRootPart.Position
    local allDetectedThreats = {}
    local threatCount = 0

    -- Cache humanoid/HRP fora do loop
    for i = 1, #self._validPlayers do
        local player = self._validPlayers[i]
        local character = player.Character
        if character then
            local hrp = character:FindFirstChild("HumanoidRootPart")
            local humanoid = character:FindFirstChild("Humanoid")
            if hrp and humanoid then
                -- Passe character, hrp, humanoid para as funções de verificação se desejar otimizar ainda mais
                local playerThreats = self:_scanPlayerForThreats(player, myPosition)
                for j = 1, #playerThreats do
                    threatCount = threatCount + 1
                    allDetectedThreats[threatCount] = playerThreats[j]
                end
            end
        end
    end

    self:_updateBlockingState(allDetectedThreats)
end

-- Enable AutoBlock system
function AutoBlock:enable()
    if self.enabled then 
        return false
    end
    
    self.enabled = true
    
    -- Connect to stepped for performance (lower frequency than heartbeat)
    self._connectionManager:add(RunService.Stepped:Connect(function()
        if self.enabled then
            self:detectThreats()
        end
    end))
    
    return true
end

-- Disable AutoBlock system
function AutoBlock:disable()
    if not self.enabled then
        return false
    end
    
    self.enabled = false
    self._connectionManager:disconnectAll()
    
    -- Clear caches
    self._playerCache = {}
    self._validPlayers = {}
    
    if self._isCurrentlyBlocking then
        self:triggerUnblock()
        self._isCurrentlyBlocking = false
        self._currentThreats = {}
    end
    
    return true
end

-- Check if system is currently enabled
function AutoBlock:isEnabled()
    return self.enabled
end

-- Check if currently blocking
function AutoBlock:isCurrentlyBlocking()
    return self._isCurrentlyBlocking
end

-- Get comprehensive system status
function AutoBlock:getStatus()
    local singleThreats = self:getThreatsByType(false)
    local comboThreats = self:getThreatsByType(true)
    
    return {
        enabled = self.enabled,
        currentlyBlocking = self._isCurrentlyBlocking,
        blockRadius = self.blockRadius,
        singleThreats = #singleThreats,
        comboThreats = #comboThreats,
        totalThreats = #singleThreats + #comboThreats,
        currentActiveThreats = #self._currentThreats,
        detectionSettings = self._detectionSettings,
        lastDetectionTime = self._lastDetectionTime
    }
end

-- Clean up and destroy the AutoBlock instance
function AutoBlock:destroy()
    self:disable()
    
    if self._connectionManager then
        self._connectionManager:disconnectAll()
        self._connectionManager = nil
    end
    
    -- Clear all references
    self._threatConfigs = nil
    self._currentThreats = nil
    self._playerCache = nil
    self._validPlayers = nil
    self._isCurrentlyBlocking = false
end

-- Optimized facing check
function AutoBlock:_isFacing(player, target, maxAngle)
    if not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then return false end
    if not target.Character or not target.Character:FindFirstChild("HumanoidRootPart") then return false end
    
    local fromPos = player.Character.HumanoidRootPart.Position
    local toPos = target.Character.HumanoidRootPart.Position
    local lookVector = player.Character.HumanoidRootPart.CFrame.LookVector
    local direction = (toPos - fromPos).Unit
    local dot = lookVector:Dot(direction)
    local angle = math_deg(math_acos(dot))
    
    return angle <= (maxAngle or 45)
end

-- Set threat block distance
function AutoBlock:setThreatBlockDistance(threatId, distance)
    local config = self._threatConfigs[threatId]
    if config and distance and distance > 0 then
        config.blockDistance = distance
        return true
    end
    return false
end

-- Legacy compatibility methods (optimized)
function AutoBlock:addAutoBlockableAnimation(animationId, skillName)
    return self:addThreat("legacy_" .. animationId, {
        name = skillName,
        priority = 1,
        conditions = {
            {
                type = ConditionType.ANIMATION,
                value = animationId
            }
        }
    })
end

function AutoBlock:removeAutoBlockableAnimation(animationId)
    return self:removeThreat("legacy_" .. animationId)
end

function AutoBlock:getAutoBlockableAnimations()
    local animationList = {}
    for threatId, config in pairs(self._threatConfigs) do
        if threatId:sub(1, 7) == "legacy_" and #config.conditions == 1 and 
           config.conditions[1].type == ConditionType.ANIMATION then
            table_insert(animationList, {
                id = config.conditions[1].value,
                name = config.name
            })
        end
    end
    return animationList
end

function AutoBlock:detectAttack()
    self:detectThreats()
end

function AutoBlock:getDetectionSettings()
    return self._detectionSettings
end

return AutoBlock
