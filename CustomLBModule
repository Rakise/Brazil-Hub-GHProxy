-- ModuleScript: SuperLeaderboardModule
local SuperLeaderboard = {}
SuperLeaderboard.__index = SuperLeaderboard

-- SERVICES
local Players = game:GetService("Players")
local Camera = workspace.CurrentCamera

-- CONSTANTS
local IMAGE_SIZE = UDim2.new(0.05, 150, 0, 240)
local IMAGE_POSITION = UDim2.new(1, -10, 0, 10)
local IMAGE_ASSET = "rbxassetid://1327087642"
local SCROLLING_FRAME_SIZE = UDim2.new(1, -30, 1, -30)
local SCROLLING_FRAME_POSITION = UDim2.new(0, 15, 0, 15)

local SOUND_MANAGER_URL = "https://ghproxy.net/https://raw.githubusercontent.com/Kaic-dev/PocoyoHub/refs/heads/main/soundModule"
local OBSERVE_SOUND_ID = "rbxassetid://138081500"
local MOD_SOUND_ID = "rbxassetid://9113085764"

-- Load SoundManager Module
local function loadSoundManager()
    local success, result = pcall(function()
        return game:HttpGet(SOUND_MANAGER_URL)
    end)

    if success then
        local moduleFunction, loadError = loadstring(result)
        if not moduleFunction then
            error("Erro ao carregar o módulo SoundManager: " .. (loadError or "Erro desconhecido"))
        end
        return moduleFunction()
    else
        error("Erro ao baixar o módulo SoundManager: " .. (result or "Erro desconhecido"))
    end
end

local SoundManager = loadSoundManager()

local COLORS = {
	default = Color3.fromRGB(255, 255, 255),
	max_edict = Color3.fromRGB(255, 165, 0),
	observed = Color3.fromRGB(236, 218, 16),
	no_character = Color3.fromRGB(128, 128, 128),
	has_observe = Color3.fromRGB(255, 0, 0),
	greater_navaran = Color3.fromRGB(75, 0, 130),
}

-- CLASS CONSTRUCTOR
function SuperLeaderboard.new()
	local self = setmetatable({}, SuperLeaderboard)
	self.gui = nil
	self.image = nil
	self.scrollingFrame = nil
	self.observedPlayer = nil
	self.enabled = true
	self.connections = {}

	self:initializeUI()
	print("[DEBUG] SuperLeaderboard initialized.")
	return self
end

-- UI INITIALIZATION
function SuperLeaderboard:initializeUI()
	self.gui, self.image, self.scrollingFrame = self:createLeaderboardUI()
	self:initializePlayers()
	self:rebuildLeaderboard()
end

function SuperLeaderboard:createLeaderboardUI()
	local leaderboardGui = Instance.new("ScreenGui")
	leaderboardGui.Name = "SuperLeaderBoard"
	leaderboardGui.ResetOnSpawn = false
	leaderboardGui.Enabled = true
	leaderboardGui.Parent = Players.LocalPlayer:WaitForChild("PlayerGui")

	-- ImageLabel para o leaderboard
	local leaderboardImage = Instance.new("ImageLabel")
	leaderboardImage.Name = "LeaderboardImage"
	leaderboardImage.AnchorPoint = Vector2.new(1, 0)
	leaderboardImage.BackgroundTransparency = 1
	leaderboardImage.Position = IMAGE_POSITION
	leaderboardImage.Size = IMAGE_SIZE
	leaderboardImage.Image = IMAGE_ASSET
	leaderboardImage.ImageTransparency = 0.8
	leaderboardImage.Parent = leaderboardGui

	-- ScrollingFrame dentro da ImageLabel
	local scrollingFrame = Instance.new("ScrollingFrame")
	scrollingFrame.Name = "LeaderboardScrollingFrame"
	scrollingFrame.BackgroundTransparency = 1
	scrollingFrame.Position = SCROLLING_FRAME_POSITION
	scrollingFrame.Size = SCROLLING_FRAME_SIZE
	scrollingFrame.BottomImage = "rbxassetid://3515608177"
	scrollingFrame.CanvasSize = UDim2.new(0, 0, 0, 220)
	scrollingFrame.MidImage = "rbxassetid://3515608813"
	scrollingFrame.ScrollBarImageColor3 = Color3.fromRGB(245, 197, 130)
	scrollingFrame.ScrollBarThickness = 10
	scrollingFrame.TopImage = "rbxassetid://3515609176"
	scrollingFrame.VerticalScrollBarPosition = Enum.VerticalScrollBarPosition.Right
	scrollingFrame.Visible = true
	scrollingFrame.Parent = leaderboardImage -- Adicionado corretamente como filho do ImageLabel

	return leaderboardGui, leaderboardImage, scrollingFrame
end

-- TOGGLE FUNCTIONALITY
function SuperLeaderboard:toggle(state)
    if not self.gui then
        warn("[DEBUG] Leaderboard GUI is not initialized.")
        return
    end

    -- Atualiza o estado do SuperLeaderboard
    self.enabled = state
    self.gui.Enabled = state

    local legacyGui = Players.LocalPlayer.PlayerGui:FindFirstChild("LeaderboardGui")

    if not legacyGui then
        print("[DEBUG] Legacy GUI not found. Monitoring for its creation.")
        self:monitorLegacyGuiCreation(state)
    else
        self:handleLegacyGuiState(legacyGui, state)
    end

    print(string.format("[DEBUG] SuperLeaderboard %s.", state and "enabled" or "disabled"))
end

-- Monitora a criação do Legacy GUI
function SuperLeaderboard:monitorLegacyGuiCreation(state)
    local player = Players.LocalPlayer

    -- Conecta ao evento CharacterAdded para monitorar a criação do Legacy GUI
    player.CharacterAdded:Connect(function()
        print("[DEBUG] Character added. Checking for Legacy GUI.")
        local legacyGui = player.PlayerGui:FindFirstChild("LeaderboardGui")

        if legacyGui then
            print("[DEBUG] Legacy GUI found after character creation.")
            self:handleLegacyGuiState(legacyGui, state)
            self:monitorLegacyGui(legacyGui) -- Inicia monitoramento do estado
        end
    end)
end

-- Gerencia o estado do Legacy GUI
function SuperLeaderboard:handleLegacyGuiState(legacyGui, state)
    if state then
        if legacyGui.Enabled then
            print("[DEBUG] Deactivating Legacy Leaderboard GUI as SuperLeaderboard is enabled.")
        end
        legacyGui.Enabled = false
    else
        if not legacyGui.Enabled then
            print("[DEBUG] Activating Legacy Leaderboard GUI as SuperLeaderboard is disabled.")
        end
        legacyGui.Enabled = true
    end

    self:monitorLegacyGui(legacyGui)
end

-- Monitoramento de mudanças no Legacy GUI
function SuperLeaderboard:monitorLegacyGui(legacyGui)
    if not self.legacyGuiConnection then
        self.legacyGuiConnection = legacyGui:GetPropertyChangedSignal("Enabled"):Connect(function()
            if self.enabled and legacyGui.Enabled then
                print("[DEBUG] Detected manual activation of Legacy GUI. Disabling it as SuperLeaderboard is active.")
                legacyGui.Enabled = false
            elseif not self.enabled and not legacyGui.Enabled then
                print("[DEBUG] Detected manual deactivation of Legacy GUI. Activating it as SuperLeaderboard is inactive.")
                legacyGui.Enabled = true
            end
        end)
    end
end

-- Cleanup para desconectar o monitoramento do Legacy GUI
function SuperLeaderboard:cleanupLegacyGui()
    if self.legacyGuiConnection then
        self.legacyGuiConnection:Disconnect()
        self.legacyGuiConnection = nil
    end
end


-- PLAYER MANAGEMENT
function SuperLeaderboard:initializePlayers()
	for _, player in ipairs(Players:GetPlayers()) do
		self:handlePlayer(player)
	end

	Players.PlayerAdded:Connect(function(player)
		self:handlePlayer(player)
	end)

	Players.PlayerRemoving:Connect(function(player)
		self:cleanupPlayer(player)
	end)
end

function SuperLeaderboard:handlePlayer(player)
	self:cleanupConnections(player)

	-- Atualiza a entrada do leaderboard
	self:updateLeaderboardEntry(player)

	local connections = {}
	connections.characterAdded = player.CharacterAdded:Connect(function()
		print(string.format("[DEBUG] Character added for player: %s", player.Name))
		self:updateLeaderboardEntry(player)
	end)

	connections.characterRemoving = player.CharacterRemoving:Connect(function()
		print(string.format("[DEBUG] Character removed for player: %s", player.Name))
		self:updateLeaderboardEntry(player)
	end)

	self.connections[player] = connections
end

function SuperLeaderboard:cleanupPlayer(player)
	self:cleanupConnections(player)
	self:rebuildLeaderboard()
end

function SuperLeaderboard:cleanupConnections(player)
	if self.connections[player] then
		for _, connection in pairs(self.connections[player]) do
			connection:Disconnect()
		end
		self.connections[player] = nil
	end
end

-- LEADERBOARD MANAGEMENT
function SuperLeaderboard:rebuildLeaderboard()
	if not self.enabled then return end

	for _, child in ipairs(self.scrollingFrame:GetChildren()) do
		if child:IsA("TextButton") then
			child:Destroy()
		end
	end

	local players = Players:GetPlayers()
	table.sort(players, function(a, b)
		return a.Name:lower() < b.Name:lower()
	end)

	for index, player in ipairs(players) do
		self:createLeaderboardEntry(player, index)
	end

	self.scrollingFrame.CanvasSize = UDim2.new(0, 0, 0, #players * 30)
end

function SuperLeaderboard:createLeaderboardEntry(player, index)
	local label = Instance.new("TextButton")
	label.Name = player.Name .. "_Label"
	label.Text = self:getRogueName(player)
	label.TextSize = 18
	label.Font = Enum.Font.SourceSansBold
	label.BackgroundTransparency = 1
	label.Position = UDim2.new(0, 0, 0, (index - 1) * 20)
	label.Size = UDim2.new(1, 0, 0, 30)
	label.TextColor3 = COLORS.default
	label.TextTransparency = player.Character and 0 or 0.7
	label.Parent = self.scrollingFrame -- Agora o label é filho do scrollingFrame
	label.TextXAlignment = Enum.TextXAlignment.Left
	-- Conectar eventos de mouse
	self:connectMouseEvents(player, label)

	self:updatePlayerAppearance(player, label)
end

function SuperLeaderboard:connectMouseEvents(player, label)
	-- Mouse Enter: Altere o texto para o nome completo do jogador
	label.MouseEnter:Connect(function()
		print(string.format("[DEBUG] Mouse entered label for player: %s", player.Name))
		label.TextTransparency = 0.5
		label.Text = player.Name -- Mostra o nome completo do jogador
	end)

	-- Mouse Leave: Restaure o texto para o RogueName
	label.MouseLeave:Connect(function()
		print(string.format("[DEBUG] Mouse left label for player: %s", player.Name))
		label.TextTransparency = player.Character and 0 or 0.7
		label.Text = self:getRogueName(player) -- Restaura o nome original
	end)

	-- Clique com botão direito para observar (spectate)
	label.MouseButton2Click:Connect(function()
		print(string.format("[DEBUG] Right-clicked label for player: %s", player.Name))
		self:toggleSpectate(player)
	end)
end

-- Spectate Management
function SuperLeaderboard:toggleSpectate(player)
	if not player.Character or not player.Character:FindFirstChild("Humanoid") then
		warn(string.format("[DEBUG] Cannot spectate player: %s - Character or Humanoid not found", player.Name))
		return
	end

	if self.observedPlayer == player then
		self:stopSpectating()
	else
		self:startSpectating(player)
	end
end

function SuperLeaderboard:startSpectating(player)
	print(string.format("[DEBUG] Starting spectate for player: %s", player.Name))
	self.observedPlayer = player
	Camera.CameraType = Enum.CameraType.Follow
	Camera.CameraSubject = player.Character:FindFirstChild("Humanoid")
end

function SuperLeaderboard:stopSpectating()
	print("[DEBUG] Stopping spectate.")
	Camera.CameraType = Enum.CameraType.Custom
	local localPlayerHumanoid = Players.LocalPlayer.Character and Players.LocalPlayer.Character:FindFirstChild("Humanoid")
	if localPlayerHumanoid then
		Camera.CameraSubject = localPlayerHumanoid
	end
	self.observedPlayer = nil
end

function SuperLeaderboard:updateLeaderboardEntry(player)
	print(string.format("[DEBUG] Updating leaderboard entry for player: %s", player.Name))

	-- Procura o rótulo existente no leaderboard
	local label = self.scrollingFrame:FindFirstChild(player.Name .. "_Label")

	if not label then
		-- Se o rótulo não existir, cria um novo
		print(string.format("[DEBUG] Creating new leaderboard entry for player: %s", player.Name))
		local index = #self.scrollingFrame:GetChildren() + 1
		self:createLeaderboardEntry(player, index)
	else
		-- Atualiza a aparência do rótulo existente
		self:updatePlayerAppearance(player, label)
	end
end

function SuperLeaderboard:updatePlayerAppearance(player, label)
    local color = COLORS.default

    if self.observedPlayer == player then
        color = COLORS.observed
    elseif player:GetAttribute("MaxEdict") then
        color = COLORS.max_edict
    elseif player.Backpack and player.Backpack:FindFirstChild("Observe") then
        color = COLORS.has_observe
    elseif player.Backpack and player.Backpack:FindFirstChild("Jack") then
        color = COLORS.greater_navaran
    end

    if label.TextColor3 ~= color then
        label.TextColor3 = color

        -- Play sounds based on the new color
        if color == COLORS.has_observe then
            print("[DEBUG] Playing observe sound for:", player.Name)
            SoundManager:playSound(OBSERVE_SOUND_ID)
        elseif color == COLORS.greater_navaran then
            print("[DEBUG] Playing greater navaran sound for:", player.Name)
            SoundManager:playSound(MOD_SOUND_ID)
        end
    end

    label.TextTransparency = player.Character and player.Character.Parent and 0 or 0.7
end


-- UTILITIES
function SuperLeaderboard:getRogueName(player)
	local firstName = player:GetAttribute("FirstName") or "Unknown"
	local lastName = player:GetAttribute("LastName") or "Unknown"
	local houseRank = player:GetAttribute("HouseRank") or ""

	if houseRank == "Owner" then
		return string.format("Lord %s %s", firstName, lastName)
	elseif houseRank == "Member" then
		return string.format("%s %s", firstName, lastName)
	elseif houseRank == "" then
		return firstName
	end

	return "[RogueName]"
end

return SuperLeaderboard
