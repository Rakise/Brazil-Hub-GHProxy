-- PlayerESP Otimizado para Performance Máxima
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local Utils = loadstring(game:HttpGet("https://ghproxy.net/https://raw.githubusercontent.com/Rakise/Brazil-Hub-GHProxy/refs/heads/main/UtilsService"))()
local utils = Utils.new()
local ConnectionManager = loadstring(game:HttpGet("https://ghproxy.net/https://raw.githubusercontent.com/Rakise/Brazil-Hub-GHProxy/main/ConnectionManager"))()

-- Cache global de objetos pesados
local LocalPlayer = Players.LocalPlayer
local floor = math.floor
local format = string.format
local tick = tick
local pairs = pairs
local ipairs = ipairs

-- Cache de funções Roblox para evitar indexação repetida
local newInstance = Instance.new

-- Constantes para otimização
local UPDATE_INTERVAL = 0.5 -- Intervalo de atualização dos billboards

-- ADDED: Class Tools mapping from PuppyAdmin
local class_tools = {
	["DRUID"] = "Fons Vitae",
	["SPY"] = "Rapier",
	["WRAITH"] = "Dark Eruption",
	["SHIN"] = "Grapple",
	["FACE"] = "Shadow Fan",
	["NECRO"] = "Secare",
	["DEEP"] = "Chain Pull",
	["ABYSS"] = "Wrathful Leap",
	["ONI"] = "Demon Step",
	["SMITH"] = "Ruby Shard",
	["BARD"] = "Joyous Dance",
	["ILLU"] = "Observe",
	["SIGIL"] = "Flame Charge",
	["DSAGE"] = "Lightning Drop",
	["SLAYER"] = "Thunder Spear Crash"
}

-- ADDED: Class colors from PuppyAdmin
local class_colors = {
	["DRUID"] = "#55FF55", -- Green
	["SPY"] = "#AAAAAA",   -- Gray
	["WRAITH"] = "#55557F", -- Dark Purple
	["SHIN"] = "#FFAA00", -- Orange
	["FACE"] = "#FF55FF", -- Magenta
	["NECRO"] = "#AA0000", -- Dark Red
	["DEEP"] = "#0055AA", -- Dark Blue
	["ABYSS"] = "#2A0055", -- Very Dark Purple
	["ONI"] = "#FF5555",   -- Red
	["SMITH"] = "#FFAA7F", -- Light Orange/Brown
	["BARD"] = "#FFFF55", -- Yellow
	["ILLU"] = "#AA55FF", -- Purple
	["SIGIL"] = "#FF7F00", -- Dark Orange
	["DSAGE"] = "#55FFFF", -- Cyan
	["SLAYER"] = "#FF0000", -- Bright Red
	["FRESH"] = "#FFFFFF"  -- White (Default)
}

-- ADDED: Function to get player class based on backpack tools OR character (from PuppyAdmin)
local function getPlayerClass(targetPlayer)
	local backpack = targetPlayer:FindFirstChildOfClass("Backpack")
	local characterModel = targetPlayer.Character -- Get character model
	
	-- Check both backpack and character for class tools
	for classAbbr, toolName in pairs(class_tools) do
		local foundInBackpack = backpack and backpack:FindFirstChild(toolName)
		local foundInCharacter = characterModel and characterModel:FindFirstChild(toolName)
		
		if foundInBackpack or foundInCharacter then
			return classAbbr
		end
	end
	
	return "FRESH" -- Default if no class tool found in either location
end

-- Função otimizada para encontrar adornee
local function getBestAdornee(character)
    return character:FindFirstChild("Head") or 
           character:FindFirstChild("UpperTorso") or 
           character:FindFirstChild("Torso") or 
           character:FindFirstChildWhichIsA("BasePart")
end

-- Configuração dos frames e labels por tabela (ADDED Held Item)
local FRAME_CONFIG = {
    {
        name = "nameFrame",
        layout = {
            fillDirection = Enum.FillDirection.Horizontal,
            horizontalAlignment = Enum.HorizontalAlignment.Center,
            verticalAlignment = Enum.VerticalAlignment.Center
        },
        labels = {
            {
                name = "nameLabel",
                key = "playerName",
                format = "%s", -- Use RichText for color now
                dataKey = "name",
                showByDefault = true,
                getData = function(player, cache)
                    return player.Name
                end
            },
            {
                name = "distanceLabel",
                key = "distance",
                format = "[%s]",
                dataKey = "distance",
                showByDefault = true,
                getData = function(player, cache, localChar, targetChar)
                    if localChar and targetChar then
                        local localRoot = localChar:FindFirstChild("HumanoidRootPart")
                        local targetRoot = targetChar:FindFirstChild("HumanoidRootPart")
                        
                        if localRoot and targetRoot then
                            local dist = (localRoot.Position - targetRoot.Position).Magnitude
                            return floor(dist) .. "m"
                        end
                    end
                    return "0m"
                end
            }
        }
    },
    {
        name = "infoFrame",
        layout = {
            fillDirection = Enum.FillDirection.Horizontal,
            horizontalAlignment = Enum.HorizontalAlignment.Center,
            verticalAlignment = Enum.VerticalAlignment.Center
        },
        labels = {
            {
                name = "rogueLabel",
                key = "rogueName",
                format = "[%s]",
                dataKey = "rogueName",
                showByDefault = true,
                getData = function(player, cache)
                    return utils:getPlayerRogueDisplay(player)
                end
            },
            {
                name = "edictLabel",
                key = "edict",
                format = "[%s]",
                dataKey = "edict",
                showByDefault = true,
                getData = function(player, cache)
                    return utils:getPlayerEdictDisplay(player)
                end
            }
        }
    },
    {
        name = "hpFrame",
        layout = {
            fillDirection = Enum.FillDirection.Horizontal,
            horizontalAlignment = Enum.HorizontalAlignment.Center,
            verticalAlignment = Enum.VerticalAlignment.Center
        },
        labels = {
            {
                name = "hpLabel",
                key = "health",
                format = "[%s]",
                dataKey = "healthDisplay",
                showByDefault = true,
                getData = function(player, cache)
                    local healthDisplay, _ = utils:getPlayerHealthDisplay(player)
                    return healthDisplay
                end
            },
            {
                name = "hpPercLabel",
                key = "healthPercent",
                format = "[%s]",
                dataKey = "healthPercentDisplay",
                showByDefault = true,
                getData = function(player, cache)
                    local _, healthPercentDisplay = utils:getPlayerHealthDisplay(player)
                    return healthPercentDisplay
                end
            }
        }
    },
     -- ADDED: Frame for Held Item
    {
        name = "heldItemFrame",
        layout = {
            fillDirection = Enum.FillDirection.Horizontal,
            horizontalAlignment = Enum.HorizontalAlignment.Center,
            verticalAlignment = Enum.VerticalAlignment.Center
        },
        labels = {
            {
                name = "heldItemLabel",
                key = "heldItem",
                format = "[Holding: %s]",
                dataKey = "heldItem",
                showByDefault = true, -- Show held item by default
                getData = function(player, cache, localChar, targetChar)
                    if targetChar then
                         local equippedTool = targetChar:FindFirstChildWhichIsA("Tool")
                         return equippedTool and equippedTool.Name or "Nothing"
                    end
                    return "Nothing"
                end
            }
        }
    }
}

local PlayerESP = {}
PlayerESP.__index = PlayerESP

function PlayerESP.new()
    local self = setmetatable({}, PlayerESP)
    self.enabled = false
    self._connMgr = ConnectionManager.new()
    self._playerConnMgrs = {}
    self.espBillboards = {}
    self.dataCache = {}
    
    -- Gera configuração de exibição automaticamente baseada na tabela
    self.displayConfig = {}
    for i, frameConfig in ipairs(FRAME_CONFIG) do
        for j, labelConfig in ipairs(frameConfig.labels) do
            local configKey = "show" .. labelConfig.key:gsub("^%l", string.upper)
            self.displayConfig[configKey] = labelConfig.showByDefault
        end
    end
    
    -- Timestamps otimizados para diferentes tipos de atualização
    self._lastBillboardUpdate = 0
    
    -- Cache de caracteres locais para evitar múltiplas consultas
    self._localCharCache = nil
    self._localCharCacheTime = 0
    
    return self
end

-- Cache otimizado para character local
function PlayerESP:getLocalCharacter()
    local currentTime = tick()
    if currentTime - self._localCharCacheTime > 1 then
        self._localCharCache = LocalPlayer and LocalPlayer.Character
        self._localCharCacheTime = currentTime
    end
    return self._localCharCache
end

-- Função helper para criar labels de forma otimizada
local function createLabel(text, parent)
    local label = newInstance("TextLabel")
    label.FontSize = Enum.FontSize.Size14
    label.TextColor3 = Color3.new(1, 1, 1)
    label.Text = text
    label.TextStrokeTransparency = 0.5
    label.Font = Enum.Font.SourceSansSemibold
    label.BackgroundTransparency = 1
    label.TextSize = 14
    label.Size = UDim2.new(0, 0, 0.1, 0)
    label.AutomaticSize = Enum.AutomaticSize.X
    label.TextXAlignment = Enum.TextXAlignment.Center
    label.RichText = true -- Enable RichText for colors
    label.Parent = parent
    return label
end

-- Função para criar frame com layout
local function createFrameWithLayout(frameName, layoutConfig, parent)
    local frame = newInstance("Frame")
    frame.Name = frameName
    frame.BackgroundTransparency = 1
    frame.Size = UDim2.new(1, 0, 0.1, 0)
    frame.Parent = parent

    local layout = newInstance("UIListLayout")
    layout.FillDirection = layoutConfig.fillDirection
    layout.HorizontalAlignment = layoutConfig.horizontalAlignment
    layout.VerticalAlignment = layoutConfig.verticalAlignment
    layout.SortOrder = Enum.SortOrder.LayoutOrder
    layout.Parent = frame

    return frame
end

function PlayerESP:createBillboard(player)
    local character = player.Character
    if not character or character:FindFirstChild("PlayerESP") then return end
    
    local adornee = getBestAdornee(character)
    if not adornee then return end

    -- Criação otimizada do billboard com propriedades em lote
    local billboard = newInstance("BillboardGui")
    billboard.Name = "PlayerESP"
    billboard.LightInfluence = 1
    billboard.Active = true
    billboard.Adornee = adornee
    billboard.ClipsDescendants = true
    billboard.AlwaysOnTop = true
    billboard.Size = UDim2.new(0, 500, 0, 100)
    billboard.Parent = adornee

    -- Layout principal
    local mainLayout = newInstance("UIListLayout")
    mainLayout.Padding = UDim.new(0, 3)
    mainLayout.SortOrder = Enum.SortOrder.LayoutOrder
    mainLayout.Parent = billboard

    -- Estrutura para armazenar todos os elementos criados
    local billboardData = {
        billboard = billboard,
        frames = {},
        labels = {}
    }

    -- Criação dos frames e labels baseada na configuração
    for i, frameConfig in ipairs(FRAME_CONFIG) do
        local frame = createFrameWithLayout(frameConfig.name, frameConfig.layout, billboard)
        frame.LayoutOrder = i
        billboardData.frames[frameConfig.name] = frame

        -- Criação dos labels para este frame
        for j, labelConfig in ipairs(frameConfig.labels) do
            local label = createLabel("", frame)
            label.LayoutOrder = j
            billboardData.labels[labelConfig.key] = label
        end
    end

    self.espBillboards[player] = billboardData
    
    -- Cache de dados simplificado
    self.dataCache[player] = {
        lastUpdate = 0
    }
    
    self:setDisplayConfig(self.displayConfig) -- Apply initial visibility
    self:updatePlayerData(player) -- Update initial data
end

function PlayerESP:removeBillboard(player)
    local data = self.espBillboards[player]
    if data and data.billboard then
        data.billboard:Destroy()
        self.espBillboards[player] = nil
    end
    self.dataCache[player] = nil
end

-- Função otimizada para atualizar dados dos players
function PlayerESP:updatePlayerData(player)
    if not player or not player.Parent then return end
    
    local cache = self.dataCache[player]
    if not cache then return end
    
    local data = self.espBillboards[player]
    if not data then return end
    
    -- Cache de characters para otimização
    local localChar = self:getLocalCharacter()
    local targetChar = player.Character
    
    -- Get player class and color
    local playerClass = getPlayerClass(player)
    local classColor = class_colors[playerClass] or "#FFFFFF"
    
    -- Atualização dos textos usando as funções getData da tabela
    for i, frameConfig in ipairs(FRAME_CONFIG) do
        for j, labelConfig in ipairs(frameConfig.labels) do
            local label = data.labels[labelConfig.key]
            if label and labelConfig.getData then
                local value = labelConfig.getData(player, cache, localChar, targetChar)
                
                -- Special handling for player name to add class color
                if labelConfig.key == "playerName" then
                    label.Text = format("<font color='%s'>[%s]</font> %s", classColor, playerClass, value)
                else
                    label.Text = labelConfig.format:format(value)
                end
            end
        end
    end
end

-- Função otimizada para atualizar billboards
function PlayerESP:updateBillboards()
    local currentTime = tick()
    if currentTime - self._lastBillboardUpdate < UPDATE_INTERVAL then return end
    self._lastBillboardUpdate = currentTime
    
    -- Lista de players a serem removidos (para evitar modificação durante iteração)
    local toRemove = {}
    
    for player, data in pairs(self.espBillboards) do
        if player and player.Parent and player.Character then
            self:updatePlayerData(player)
        else
            toRemove[#toRemove + 1] = player
        end
    end
    
    -- Remove players inválidos
    for i = 1, #toRemove do
        self:removeBillboard(toRemove[i])
    end
end

function PlayerESP:connectPlayer(player)
    if player == LocalPlayer then return end
    
    local mgr = self._playerConnMgrs[player]
    if mgr then mgr:disconnectAll() end
    
    mgr = ConnectionManager.new()
    self._playerConnMgrs[player] = mgr
    
    mgr:add(player.CharacterAdded:Connect(function(character)
        if self.enabled then
            -- Pequeno delay para garantir que o character esteja totalmente carregado
            task.wait(0.1)
            self:createBillboard(player)
        end
    end))
    
    mgr:add(player.CharacterRemoving:Connect(function(character)
        self:removeBillboard(player)
    end))
    
    if player.Character then
        self:createBillboard(player)
    end
end

function PlayerESP:enable()
    self.enabled = true
    self:cleanup()
    
    -- Conecta players existentes
    local playerList = Players:GetPlayers()
    for i = 1, #playerList do
        self:connectPlayer(playerList[i])
    end
    
    self._connMgr:add(Players.PlayerAdded:Connect(function(player)
        self:connectPlayer(player)
    end))
    
    self._connMgr:add(Players.PlayerRemoving:Connect(function(player)
        self:removeBillboard(player)
        local mgr = self._playerConnMgrs[player]
        if mgr then
            mgr:disconnectAll()
            self._playerConnMgrs[player] = nil
        end
    end))
    
    -- Usa Heartbeat com throttling interno otimizado
    self._connMgr:add(RunService.Heartbeat:Connect(function()
        self:updateBillboards()
    end))
end

function PlayerESP:disable()
    self.enabled = false
    self:cleanup()
end

function PlayerESP:cleanup()
    self._connMgr:disconnectAll()
    for _, mgr in pairs(self._playerConnMgrs) do
        mgr:disconnectAll()
    end
    self._playerConnMgrs = {}
    for player, _ in pairs(self.espBillboards) do
        self:removeBillboard(player)
    end
    self.dataCache = {}
    -- Limpa cache local
    self._localCharCache = nil
    self._localCharCacheTime = 0
end

-- Funções de configuração otimizadas
function PlayerESP:setTextSize(size)
    for _, data in pairs(self.espBillboards) do
        for _, label in pairs(data.labels) do
            label.TextSize = size
        end
    end
end

function PlayerESP:setTextColor(color)
    for _, data in pairs(self.espBillboards) do
        for key, label in pairs(data.labels) do
             -- Don't override player name color which uses RichText now
            if key ~= "playerName" then
                label.TextColor3 = color
            end
        end
    end
end

function PlayerESP:setDisplayConfig(config)
    -- Atualiza configuração se fornecida
    if config then
        for key, value in pairs(config) do
            self.displayConfig[key] = value
        end
    end
    
    -- Iterate through all existing billboards
    for player, billboardData in pairs(self.espBillboards) do
        if billboardData and billboardData.billboard then
            local mainBillboard = billboardData.billboard
            local anyFrameVisible = false -- Track if any frame should be shown for this player

            -- Iterate through the FRAME_CONFIG to control frame visibility
            for i, frameConfig in ipairs(FRAME_CONFIG) do
                local frame = billboardData.frames[frameConfig.name]
                if frame then
                    local frameShouldBeVisible = false
                    -- Check if *any* label within this frame should be visible
                    for j, labelConfig in ipairs(frameConfig.labels) do
                        local configKey = "show" .. labelConfig.key:gsub("^%l", string.upper)
                        if self.displayConfig[configKey] ~= false then -- Visible if true or nil
                            frameShouldBeVisible = true
                            break -- No need to check other labels in this frame
                        end
                    end
                    
                    frame.Parent = frameShouldBeVisible and mainBillboard or nil -- Set parent based on visibility
                    if frameShouldBeVisible then
                        anyFrameVisible = true -- Mark that at least one frame is visible
                    end
                end
            end
             -- Optional: Hide the entire billboard if NO frames are visible
            -- mainBillboard.Enabled = anyFrameVisible 
        end
    end
end


return PlayerESP
