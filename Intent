--[[
    Intent System - Displays equipped tool names above players' heads
    
    This module creates billboard GUIs that show what tool each player has equipped.
    It automatically updates when players equip/unequip tools and manages cleanup.
]]

local Intent = {}

-- Module state
Intent.enabled = false

-- Services
local Players = game:GetService("Players")

-- Load UtilsService
local Utils = loadstring(game:HttpGet("https://ghproxy.net/https://raw.githubusercontent.com/Rakise/Brazil-Hub-GHProxy/refs/heads/main/UtilsService"))()
local utils = Utils.new()

-- Configuration constants
local CONFIG = {
    BILLBOARD_SIZE = UDim2.new(5, 0, 1, 0),
    BILLBOARD_OFFSET = Vector2.new(0, 3),
    MAX_DISTANCE = 60,
    LABEL_TEXT_SIZE = 14,
    LABEL_COLOR = Color3.new(1, 1, 1),
    STROKE_THICKNESS = 2,
    STROKE_TRANSPARENCY = 0.1,
    DEFAULT_TOOL_TEXT = "None"
}

-- Internal state
local ConnectionManager = loadstring(game:HttpGet("https://ghproxy.net/https://raw.githubusercontent.com/Rakise/Brazil-Hub-GHProxy/main/ConnectionManager"))()
local billboardRegistry = {}
local connectionMgr = ConnectionManager.new() -- global (PlayerAdded, etc)
local connectionMgrs = {} -- [player] = ConnectionManager para tool monitoring

--[[
    Removes the intent billboard for a specific player
    @param player: Player - The player whose billboard should be removed
]]
local function removePlayerBillboard(player)
    local billboard = billboardRegistry[player]
    if billboard then
        billboard:Destroy()
        billboardRegistry[player] = nil
    end
    if connectionMgrs[player] then
        connectionMgrs[player]:disconnectAll()
        connectionMgrs[player] = nil
    end
end

--[[
    Updates the text label of a player's intent billboard
    @param player: Player - The player whose billboard should be updated
]]
local function updateBillboardLabel(player)
    local billboard = billboardRegistry[player]
    if not billboard then return end
    local textBox = billboard:FindFirstChild("Tool")
    if not textBox then return end
    local equippedTool = utils:getEquippedTool(player)
    if equippedTool then
        local details = utils:getToolDetails(equippedTool)
        textBox.Text = details and details.name or ""
        textBox.TextTransparency = 0
    else
        textBox.Text = ""
        textBox.TextTransparency = 1
    end
end

--[[
    Creates the billboard GUI structure for displaying tool names
    @param parentObject: Instance - The object to parent the billboard to
    @return BillboardGui - The created billboard GUI
]]
local function createBillboardStructure(parentObject)
    -- Create main billboard GUI
    local billboard = Instance.new("BillboardGui")
    billboard.Name = "Watched"
    billboard.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    billboard.MaxDistance = 9.999999778196308e+22
    billboard.AutoLocalize = false
    billboard.Active = true
    billboard.StudsOffsetWorldSpace = Vector3.new(0,5,0)
    billboard.ClipsDescendants = true
    billboard.Size = UDim2.new(25,0,10,0)
    billboard.Adornee = parentObject
    billboard.Parent = parentObject

    -- Create TextBox
    local textBox = Instance.new("TextBox")
    textBox.Name = "Tool"
    textBox.TextWrapped = true
    textBox.TextTransparency = 1
    textBox.TextStrokeTransparency = 0
    textBox.TextTruncate = Enum.TextTruncate.AtEnd
    textBox.BorderSizePixel = 0
    textBox.Size = UDim2.new(0.5,10,0.25,10)
    textBox.AutoLocalize = false
    textBox.TextColor3 = Color3.new(1,1,1)
    textBox.BorderColor3 = Color3.new(9/85,14/85,53/255)
    textBox.Text = ""
    textBox.Selectable = false
    textBox.PlaceholderColor3 = Color3.new(0,0,0)
    textBox.BackgroundTransparency = 1
    textBox.Font = Enum.Font.Antique
    textBox.Position = UDim2.new(0.25,-5,0.375,-5)
    textBox.FontSize = Enum.FontSize.Size28
    textBox.TextSize = 25
    textBox.BackgroundColor3 = Color3.new(1,1,1)
    textBox.TextWrap = true
    textBox.Parent = billboard

    return billboard
end

--[[
    Sets up event connections to monitor tool changes for a player
    @param player: Player - The player to monitor
]]
local function setupToolChangeMonitoring(player)
    local character = player.Character
    if not character then return end
    if connectionMgrs[player] then
        connectionMgrs[player]:disconnectAll()
    end
    connectionMgrs[player] = ConnectionManager.new()
    local mgr = connectionMgrs[player]
    local function onToolChange(child)
        if child:IsA("Tool") then
            updateBillboardLabel(player)
        end
    end
    mgr:add(character.ChildAdded:Connect(onToolChange))
    mgr:add(character.ChildRemoved:Connect(onToolChange))
end

--[[
    Creates an intent billboard for a specific player
    @param player: Player - The player to create a billboard for
]]
local function createPlayerBillboard(player)
    -- Remove billboard/conexões antigos antes de criar novo
    removePlayerBillboard(player)
    -- Skip if player is local player or billboard já existe (após remoção, nunca existirá)
    if not player or player == Players.LocalPlayer or billboardRegistry[player] then 
        return 
    end
    
    local character = player.Character
    if not character then return end
    
    local head = character:FindFirstChild("Head")
    if not head then return end
    
    -- Create billboard structure
    local billboard = createBillboardStructure(head)
    
    -- Inicializa o texto do label corretamente
    local label = billboard:FindFirstChild("Tool")
    if label then
        local equippedTool = utils:getEquippedTool(player)
        if equippedTool then
            local details = utils:getToolDetails(equippedTool)
            label.Text = details and details.name or ""
            label.TextTransparency = 0
        else
            label.Text = ""
            label.TextTransparency = 1
        end
    end
    
    -- Register billboard
    billboardRegistry[player] = billboard
    
    -- Set up tool change monitoring
    setupToolChangeMonitoring(player)
    -- Garante atualização do texto
    updateBillboardLabel(player)
end

--[[
    Creates billboards for all eligible players currently in the game
]]
local function createAllBillboards()
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= Players.LocalPlayer then
            createPlayerBillboard(player)
        end
    end
end

--[[
    Removes all intent billboards and clears the registry
]]
local function removeAllBillboards()
    for player, billboard in pairs(billboardRegistry) do
        if billboard then
            billboard:Destroy()
        end
        if connectionMgrs[player] then
            connectionMgrs[player]:disconnectAll()
            connectionMgrs[player] = nil
        end
    end
    billboardRegistry = {}
end

--[[
    Sets up event connections for player join/character spawn events
]]
local function setupPlayerEventConnections()
    local playerAddedConnection = Players.PlayerAdded:Connect(function(player)
        local characterAddedConnection = player.CharacterAdded:Connect(function()
            createPlayerBillboard(player)
        end)
        connectionMgr:add(characterAddedConnection)
    end)
    connectionMgr:add(playerAddedConnection)
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= Players.LocalPlayer then
            local characterAddedConnection = player.CharacterAdded:Connect(function()
                createPlayerBillboard(player)
            end)
            connectionMgr:add(characterAddedConnection)
        end
    end
end

--[[
    Disconnects all event connections and clears the registry
]]
local function disconnectAllConnections()
    connectionMgr:disconnectAll()
    for _, mgr in pairs(connectionMgrs) do
        mgr:disconnectAll()
    end
    connectionMgrs = {}
end

--[[
    Enables the intent system
    Creates billboards for all players and sets up event monitoring
]]
function Intent.enable()
    if Intent.enabled then return end
    
    Intent.enabled = true
    createAllBillboards()
    setupPlayerEventConnections()
    -- Deixa todos os labels visíveis
    for _, billboard in pairs(billboardRegistry) do
        local label = billboard:FindFirstChild("Tool")
        if label then
            label.TextTransparency = 0
        end
    end
end

--[[
    Disables the intent system
    Removes all billboards and disconnects all event connections
]]
function Intent.disable()
    if not Intent.enabled then return end
    
    Intent.enabled = false
    -- Deixa todos os labels invisíveis
    for _, billboard in pairs(billboardRegistry) do
        local label = billboard:FindFirstChild("Tool")
        if label then
            label.TextTransparency = 1
        end
    end
    removeAllBillboards()
    disconnectAllConnections()
end

--[[
    Checks if the intent system is currently enabled
    @return boolean - True if enabled, false otherwise
]]
function Intent.isEnabled()
    return Intent.enabled
end

--[[
    Manually updates all billboards (useful for debugging or forced refresh)
]]
function Intent.refreshAll()
    if not Intent.enabled then return end
    
    for player, _ in pairs(billboardRegistry) do
        updateBillboardLabel(player)
    end
end

return {
    enable = Intent.enable,
    disable = Intent.disable,
    isEnabled = Intent.isEnabled,
    refreshAll = Intent.refreshAll,
    connectionMgr = connectionMgr,
    connectionMgrs = connectionMgrs
}
